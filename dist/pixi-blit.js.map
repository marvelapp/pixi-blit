{"version":3,"file":"pixi-blit.js","sourceRoot":"","sources":["../src/BlitComponent.ts","../src/RenderBuffer.ts","../src/RenderBufferGL1.ts","../src/RenderBufferGL2.ts","../src/xporter.ts","../src/mixins/FilterSystemMixin.ts","../src/mixins/TextureSystemMixin.ts","../src/vector/Atlas.ts","../src/vector/AtlasCollection.ts","../src/vector/AtlasNode.ts","../src/vector/MemoryComponent.ts","../src/vector/RasterCache.ts","../src/vector/ShapeCache.ts","../src/vector/VectorModel.ts","../src/vector/VectorSprite.ts","../src/vector/model.ts","../src/vector/impl/CanvasAtlasResource.ts","../src/vector/impl/CanvasAtlasStorage.ts","../src/vector/impl/WebGLAtlasStorage.ts"],"names":[],"mappings":"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","sourcesContent":["namespace pixi_blit {\n    export class BlitComponent {\n        constructor() {\n\n        }\n\n        sprite: PIXI.Sprite = null;\n\n        tryRender(renderer: PIXI.Renderer) {\n            if (this.sprite) {\n                this.sprite.render(renderer);\n                return true;\n            }\n\n            return false;\n        }\n    }\n}\n","namespace pixi_blit {\n    export enum BLIT_STORAGE_MODE {\n        AUTO_DETECT = 0,\n        RENDER_TEXTURE = 1,\n        MSAA,\n        WEBGL_CONTEXT,\n    }\n\n    export interface IRenderBufferOptions {\n        width: number;\n        height: number;\n        resolution?: number;\n        storageMode?: BLIT_STORAGE_MODE\n    }\n\n    export interface ITextureOptions {\n        width: number;\n        height: number;\n        resolution: number;\n        scaleMode: PIXI.SCALE_MODES;\n    }\n\n    export class BlitRequest {\n        output: PIXI.RenderTexture = null;\n        matchRes = false;\n        doClear = false;\n        rect = new PIXI.Rectangle();\n    }\n\n    import CLEAR_MODES = PIXI.CLEAR_MODES;\n\n    /**\n     * high-level API that is backed by\n     * 1. renderTexture\n     * 2. MSAA renderbuffer inside hacked RenderTexture/Framebuffer\n     * 3. another webgl context\n     */\n    export class RenderBuffer {\n        _storageMode = BLIT_STORAGE_MODE.RENDER_TEXTURE;\n\n        constructor(renderer: PIXI.Renderer, options: IRenderBufferOptions) {\n            this.parentRenderer = renderer;\n\n            this._dimensions = {\n                width: options.width,\n                height: options.height,\n                resolution: options.resolution || 1,\n                scaleMode: PIXI.SCALE_MODES.LINEAR,\n            };\n\n            this._blitFilter = new PIXI.filters.AlphaFilter();\n            this._blitFilter.blendMode = PIXI.BLEND_MODES.NONE;\n            this._storageMode = BLIT_STORAGE_MODE.WEBGL_CONTEXT;\n            this._init(options);\n        }\n\n        _init(options: IRenderBufferOptions) {\n            this.innerTexture = PIXI.RenderTexture.create(this._dimensions);\n        }\n\n        _dimensions: ITextureOptions;\n\n        /**\n         * parent renderer\n         */\n        parentRenderer: PIXI.Renderer = null;\n        /**\n         * inner renderer, if present then its WebGL1\n         */\n        innerRenderer: PIXI.Renderer = null;\n        /**\n         * inner texture, hacked or not\n         */\n        innerTexture: PIXI.RenderTexture = null;\n\n        clearBeforeBlit = CLEAR_MODES.AUTO;\n\n        get storageMode() {\n            return this._storageMode;\n        }\n\n        get dimensions() {\n            return this._dimensions;\n        }\n\n        get width() {\n            return this._dimensions.width;\n        }\n\n        get height() {\n            return this._dimensions.height;\n        }\n\n        get resolution() {\n            return this._dimensions.resolution;\n        }\n\n        /**\n         * method analog to PIXI.Renderer#render : it renders stuff in buffer, then blits it to renderTexture if available\n         */\n        renderAndBlit(container: PIXI.Container, renderTexture: PIXI.RenderTexture, clear = false,\n                      translation?: PIXI.Matrix, skipUpdateTransform = false) {\n            //TODO: dont track AA groups in this case. set renderer _activeBlitBuffer\n            this.parentRenderer.render(container, this.innerTexture, clear, translation, skipUpdateTransform);\n            if (renderTexture) {\n                this.blit(renderTexture);\n            }\n        }\n\n        _blitFilter: PIXI.Filter = null;\n        _blitRequest = new BlitRequest();\n\n        /**\n         * Texture copy, doesnt support offset due to webgl1 backend.\n         * @param destination target renderTexture\n         */\n        blit(destination: PIXI.RenderTexture) {\n            if (this.parentRenderer.context.isLost) {\n                return;\n            }\n\n            const dimensions = this._dimensions;\n\n            const req = this._blitRequest;\n            req.rect.width = Math.min(dimensions.width, destination.width);\n            req.rect.height = Math.min(dimensions.height, destination.height);\n            req.matchRes = destination.baseTexture.resolution === dimensions.resolution;\n            req.doClear = this.clearBeforeBlit == CLEAR_MODES.CLEAR || this.clearBeforeBlit == CLEAR_MODES.AUTO &&\n                (destination.width > req.rect.width || destination.height > req.rect.height);\n            req.output = destination;\n\n            this._blitInner(req);\n        }\n\n        _blitInner(req: BlitRequest) {\n            this._blitInnerTexture(req);\n        }\n\n        _blitInnerTexture(req: BlitRequest) {\n            //this.innerTexture is copied or drawn on req.output, depends on resolution\n            const renderer = this.parentRenderer;\n            const {gl} = renderer;\n            const input = this.innerTexture;\n            const {output, rect, matchRes, doClear} = req;\n\n            if (matchRes) {\n                if (doClear) {\n                    renderer.renderTexture.bind(output);\n                    renderer.renderTexture.clear();\n                }\n                renderer.renderTexture.bind(input);\n                renderer.texture.bindForceLocation(output, 0);\n                gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n                renderer.gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0,\n                    rect.width, rect.height);\n            } else {\n                // TODO: make better filtering here, for example: 3x3 to 1 pixel\n                renderer.filter.applyOuterFilter(this._blitFilter, input, output, rect, doClear);\n            }\n        }\n\n        static create(renderer: PIXI.Renderer, options: IRenderBufferOptions) {\n            let storageMode = options.storageMode || BLIT_STORAGE_MODE.AUTO_DETECT;\n            if (storageMode === BLIT_STORAGE_MODE.AUTO_DETECT) {\n                if (renderer.context.webGLVersion === 2) {\n                    storageMode = BLIT_STORAGE_MODE.MSAA;\n                } else {\n                    storageMode = BLIT_STORAGE_MODE.WEBGL_CONTEXT;\n                }\n            }\n            switch (storageMode) {\n                case BLIT_STORAGE_MODE.WEBGL_CONTEXT:\n                    return new RenderBufferGL1(renderer, options);\n                case BLIT_STORAGE_MODE.MSAA:\n                    return new RenderBufferGL2(renderer, options);\n                default:\n                    return new RenderBuffer(renderer, options);\n            }\n        }\n\n        dispose() {\n            if (this.innerTexture) {\n                this.innerTexture.baseTexture.dispose();\n            }\n        }\n\n        destroy() {\n            this.dispose();\n            this.innerTexture = null;\n            if (this.innerRenderer) {\n                this.innerRenderer.destroy();\n                this.innerRenderer = null;\n            }\n        }\n    }\n}\n","namespace pixi_blit {\n    export class RenderBufferGL1 extends RenderBuffer {\n        _init(options: IRenderBufferOptions) {\n            this.innerRenderer = new PIXI.Renderer({\n                antialias: true,\n                transparent: true,\n                ...this._dimensions\n            });\n        }\n\n        renderAndBlit(container: PIXI.Container, renderTexture: PIXI.RenderTexture, clear = false,\n                      translation?: PIXI.Matrix, skipUpdateTransform = false) {\n            if (this.innerRenderer.context.isLost) {\n                return;\n            }\n\n            this.innerRenderer.render(container, undefined, clear, translation, skipUpdateTransform);\n            if (renderTexture) {\n                this.blit(renderTexture);\n            }\n        }\n\n        _blitInner(req: BlitRequest) {\n            if (this.innerRenderer.context.isLost) {\n                return;\n            }\n            const renderer = this.parentRenderer;\n            const {gl} = renderer;\n            const sourceCanvas = this.innerRenderer.view;\n\n            const {output, rect, matchRes, doClear} = req;\n            const dimensions = this._dimensions;\n            const ignoreInnerTexture = matchRes && rect.width == dimensions.width\n                && rect.height == dimensions.height;\n\n            if (ignoreInnerTexture) {\n                if (doClear) {\n                    renderer.renderTexture.bind(output);\n                    renderer.renderTexture.clear();\n                }\n                renderer.texture.bindForceLocation(output, 0);\n            } else {\n                if (!this.innerTexture) {\n                    this.innerTexture = PIXI.RenderTexture.create(this._dimensions);\n                }\n                // should we use doClear here too?\n                renderer.texture.bindForceLocation(this.innerTexture, 0);\n            }\n\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, sourceCanvas);\n\n            if (!ignoreInnerTexture) {\n                this._blitInnerTexture(req);\n            }\n        }\n    }\n}\n","namespace pixi_blit {\n    const inRect = new PIXI.Rectangle(0, 0, 1, 1);\n    const outRect = new PIXI.Rectangle(0, 0, 1, 1);\n\n    export class RenderBufferGL2 extends RenderBuffer {\n        _init(options: IRenderBufferOptions) {\n            this.innerTexture = PIXI.RenderTexture.create(this._dimensions);\n            this._storageMode = BLIT_STORAGE_MODE.MSAA;\n            this._framebuffer = (this.innerTexture.baseTexture as any).framebuffer;\n            this._framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\n        }\n\n        _framebuffer: PIXI.Framebuffer;\n        useBlitForScale = true;\n\n        renderAndBlit(container: PIXI.Container, renderTexture: PIXI.RenderTexture, clear = false,\n                      translation?: PIXI.Matrix, skipUpdateTransform = false) {\n            this.parentRenderer.render(container, this.innerTexture, clear, translation, skipUpdateTransform);\n            if (renderTexture) {\n                this.blit(renderTexture);\n            }\n        }\n\n        _blitInner(req: BlitRequest) {\n            const renderer = this.parentRenderer;\n            const gl = renderer.gl as any;\n            const {rect, matchRes, doClear} = req;\n            const resizeTo: PIXI.Framebuffer = (req.output.baseTexture as any).framebuffer;\n            const blitTo = matchRes ? resizeTo : null;\n            const inputRes = this._dimensions.resolution;\n            const outRes = req.output.baseTexture.resolution;\n\n            if (doClear) {\n                renderer.renderTexture.bind(req.output);\n                renderer.renderTexture.clear();\n            }\n            renderer.renderTexture.bind(this.innerTexture);\n\n\n            inRect.width = Math.round(rect.width * inputRes);\n            inRect.height = Math.round(rect.height * inputRes);\n\n            renderer.framebuffer.blit(blitTo, inRect, inRect);\n            if (!matchRes) {\n                if (this.useBlitForScale) {\n                    outRect.width = Math.round(rect.width * outRes);\n                    outRect.height = Math.round(rect.height * outRes);\n                    renderer.framebuffer.blit(resizeTo, inRect, outRect);\n                } else {\n                    this._blitInnerTexture(req);\n                }\n            }\n            renderer.renderTexture.bind(null);\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n        }\n    }\n}\n","/// <reference types=\"pixi.js-legacy\" />\n\nnamespace pixi_blit {\n    (PIXI as any).blit = pixi_blit;\n}\n\ndeclare module \"pixi-blit\" {\n    export = pixi_blit;\n}\n","declare namespace PIXI.systems {\n    export interface FilterSystem {\n        applyOuterFilter(filter: Filter, input: RenderTexture, output: RenderTexture, rect: PIXI.Rectangle, clear?: boolean): void;\n    }\n}\n\nnamespace pixi_blit {\n    const tempState = {\n        sourceFrame: new PIXI.Rectangle(),\n        destinationFrame: new PIXI.Rectangle(),\n        resolution: 1,\n    };\n\n    function applyOuterFilter(this: PIXI.systems.FilterSystem, filter: PIXI.Filter, input: PIXI.RenderTexture, output: PIXI.RenderTexture,\n                              rect: PIXI.Rectangle, clear = true) {\n        const state = tempState;\n        state.sourceFrame = rect;\n        state.destinationFrame = input.frame;\n        state.resolution = input.resolution;\n        const saveFilterFrame = input.filterFrame;\n        (input as any).filterFrame = rect;\n\n        // filling uniforms, copied from pop()\n\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.outputFrame = state.sourceFrame;\n        globalUniforms.resolution = state.resolution;\n\n        const inputSize = globalUniforms.inputSize;\n        const inputPixel = globalUniforms.inputPixel;\n        const inputClamp = globalUniforms.inputClamp;\n\n        inputSize[0] = state.destinationFrame.width;\n        inputSize[1] = state.destinationFrame.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = inputSize[0] * state.resolution;\n        inputPixel[1] = inputSize[1] * state.resolution;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        (this.globalUniforms as any).update();\n\n        //applying shader\n        filter.apply(this, input, output, clear ? PIXI.CLEAR_MODES.CLEAR : PIXI.CLEAR_MODES.NO, state);\n\n        //restore old frame\n        (input as any).filterFrame = saveFilterFrame;\n    }\n\n\tPIXI.systems.FilterSystem.prototype.applyOuterFilter = applyOuterFilter;\n}\n","declare namespace PIXI.systems {\n    export interface TextureSystem {\n        bindForceLocation(tex: Texture | BaseTexture, location?: number): void;\n    }\n}\n\nnamespace pixi_blit {\n    function bindForceLocation(this:PIXI.systems.TextureSystem, tex: PIXI.Texture | PIXI.BaseTexture, location = 0) {\n        const { gl } = this as any;\n        if (this.currentLocation !== location) {\n            (this as any).currentLocation = location;\n            gl.activeTexture(gl.TEXTURE0 + location);\n        }\n        this.bind(tex, location);\n    }\n    PIXI.systems.TextureSystem.prototype.bindForceLocation = bindForceLocation;\n\n}\n","namespace pixi_blit {\n\n\n    export enum CacheType {\n        Auto = 0,\n        No_Cache = 1,\n        Canvas2d = 2,\n        WebGL = 3,\n        RuntimeWebGL = 4,\n    }\n\n    export abstract class AbstractAtlasStorage {\n        constructor(public readonly type: CacheType, public options: PIXI.ISize) {\n        }\n\n        readonly baseTexture: PIXI.BaseTexture;\n\n        atlas: Atlas = null;\n\n        bind(atlas: Atlas) {\n            this.atlas = atlas;\n        }\n\n        unbind() {\n            this.atlas = null;\n        }\n\n        abstract dispose(): void;\n    }\n\n    export class Atlas {\n        root: AtlasNode<RasterCache> = null;\n        addedElements: Array<RasterCache> = [];\n        pad: number = 1;\n        isSingle = false;\n        totalArea = 0;\n        usedArea = 0;\n        drawnElements = 0;\n\n        mem = new MemoryComponent();\n\n        uniqId: number;\n\n        constructor(public readonly storage: AbstractAtlasStorage) {\n            this.uniqId = generateUid();\n            this.root = this.createAtlasRoot();\n            storage.bind(this);\n        }\n\n        get options() {\n            return this.storage.options;\n        }\n\n        get type() {\n            return this.storage.type;\n        }\n\n        markSingle() {\n            this.pad = 0;\n            this.isSingle = true;\n        }\n\n        hasNew() {\n            return this.drawnElements < this.addedElements.length;\n        }\n\n        markClean() {\n            this.drawnElements = this.addedElements.length;\n        }\n\n        destroy() {\n            const {addedElements} = this;\n\n            this.mem.cacheStatus = CacheStatus.Disposed;\n            (this as any).storage = null;\n            for (let i = 0; i < addedElements.length; i++) {\n                const elem = addedElements[i];\n                if (elem.mem.cacheStatus === CacheStatus.Hanging) {\n                    elem.destroy();\n                }\n            }\n        }\n\n        protected createAtlasRoot(): AtlasNode<RasterCache> {\n            // created only one time!\n            let res = AtlasNode.allocate<RasterCache>();\n            res.rect.width = this.options.width;\n            res.rect.height = this.options.height;\n            return res;\n        }\n\n        insert(elem: RasterCache) {\n            const {pad, root} = this;\n            elem.newAtlasNode = root.insert(elem.width + 2 * pad, elem.height + 2 * pad, elem);\n\n            this.totalArea += elem.area;\n            this.usedArea += elem.area;\n\n            if (elem.newAtlasNode) {\n                elem.newAtlas = this;\n                this.addedElements.push(elem);\n                return true;\n            }\n            return false;\n        }\n\n        reset() {\n            if (this.root) {\n                this.root.freeSubtree();\n            }\n            this.root = this.createAtlasRoot();\n            this.addedElements.length = 0;\n            this.totalArea = 0;\n            this.usedArea = 0;\n            this.drawnElements = 0;\n        }\n\n        calcHoldArea() {\n            const {addedElements} = this;\n            let holdArea = 0;\n\n            for (let i = 0; i < addedElements.length; i++) {\n                const elem = addedElements[i];\n\n                if (elem.mem.cacheStatus <= CacheStatus.Drawn) {\n                    holdArea += elem.area;\n                }\n            }\n\n            this.usedArea = holdArea;\n\n            return holdArea;\n        }\n\n        attach() {\n\n        }\n\n        prepareRender(elem: RasterCache) {\n            const {pad, storage} = this;\n\n            if (elem.newAtlas === null) {\n                if (elem.atlas === this) {\n                    return;\n                } else {\n                    throw new Error(\"Atlas element init error: element belongs to another atlas\");\n                }\n            }\n\n            if (elem.newAtlas !== this) {\n                throw new Error(\"Atlas element init error: element should be added to another atlas\");\n            }\n\n            const prevAtlas = elem.atlas;\n            const oldTexture = elem.texture;\n\n            elem.atlas = this;\n            elem.atlasNode = elem.newAtlasNode;\n            elem.newAtlas = null;\n            elem.newAtlasNode = null;\n\n            const {graphicsNode, atlasNode, outerBounds} = elem;\n\n            graphicsNode.transform.position.set(\n                -outerBounds.x + pad + atlasNode.rect.left,\n                -outerBounds.y + pad + atlasNode.rect.top);\n            graphicsNode._recursivePostUpdateTransform();\n\n            elem.texture = new PIXI.Texture(storage.baseTexture,\n                new PIXI.Rectangle(atlasNode.rect.left + pad,\n                    atlasNode.rect.top + pad, elem.width, elem.height));\n\n            if (prevAtlas) {\n                if (elem.oldAtlasSprite) {\n                    // moved two times? CURSED! drop it!\n                    elem.oldAtlasSprite = null;\n                } else {\n                    // just after the relocation we allow to copy element data\n                    // from previous location if its possible\n                    const sprite = elem.oldAtlasSprite = new PIXI.Sprite(oldTexture);\n                    elem.oldAtlasSprite.position.set(elem.texture.frame.x, elem.texture.frame.y);\n                    sprite._recursivePostUpdateTransform();\n                }\n            }\n        }\n    }\n}\n","namespace pixi_blit {\n    export interface IMultiAtlasOptions {\n        atlasSize: number;\n        webglAntialias?: boolean;\n        canvasAntiConflation?: boolean;\n\n        dim1MaxSize?: number;\n        dim2MinSize?: number;\n        dim2MaxSize?: number;\n        atlasAllowInsert?: boolean;\n        mergeThreshold?: number;\n    }\n\n    const lightQueue: Array<RasterCache> = [];\n    const newAtlases: Array<Atlas> = [];\n\n    export class AtlasCollection {\n        constructor(public readonly storage: AtlasCollectionStorage) {\n            storage.bind(this);\n\n            this.textureOptions = {\n                width: storage.options.atlasSize,\n                height: storage.options.atlasSize,\n            }\n        }\n\n        textureOptions: PIXI.ISize;\n\n        list: Array<Atlas> = [];\n        singles: { [key: number]: Atlas } = {};\n        newSingles: Array<Atlas> = [];\n        drop: Array<Atlas> = [];\n        pool: Array<AbstractAtlasStorage> = [];\n\n        frameRasterQueue: Array<RasterCache> = [];\n        // @popelyshev: no way to maintain it for now\n        // gcEntries: { [key: number]: IGCEntry } = {};\n        addToQueue(raster: RasterCache) {\n            if (raster.addingToCollection) {\n                if (raster.addingToCollection !== this) {\n                    throw new Error('Trying to add raster to second collection');\n                }\n                return;\n            }\n            raster.addingToCollection = this;\n            this.frameRasterQueue.push(raster);\n            // this.gcEntries[raster.uniqId] = raster;\n        }\n\n\n        elemSortMethod = (a: RasterCache, b: RasterCache) => {\n            if (b.width == a.width) {\n                return b.height - a.height;\n            }\n            return b.height - a.height;\n        };\n\n        isBig = (elem: RasterCache) => {\n            const min = Math.min(elem.width, elem.height);\n            const max = Math.max(elem.width, elem.height);\n            const {options} = this.storage;\n\n            return max >= options.dim1MaxSize || min >= options.dim2MinSize && max >= options.dim2MaxSize;\n        };\n\n        cacheSingleElem(elem: RasterCache) {\n            const {storage, singles, newSingles} = this;\n            const stor = storage.createStorageBySize(elem);\n            const atlas = new Atlas(stor);\n            atlas.markSingle();\n            atlas.insert(elem);\n            if (!elem.newAtlas) {\n                throw new Error(\"Cant add element in single atlas\");\n            }\n\n            newSingles.push(atlas);\n            singles[atlas.uniqId] = atlas;\n        }\n\n        takeFromPool() {\n            const atlas = new Atlas(this.pool.pop()\n                || this.storage.createStorageBySize(this.textureOptions));\n            this.list.push(atlas);\n            return atlas;\n        }\n\n        //TODO: move processQueue to strategy, leave only utility methods here\n\n        /**\n         * adds all that possible from queue to atlas list\n         */\n        processQueue() {\n            const queue = this.frameRasterQueue;\n            const {isBig, storage, list} = this;\n\n            //1. move all the heavy objects to separate textures\n            for (let i = 0; i < queue.length; i++) {\n                const elem = queue[i];\n                if (isBig(elem)) {\n                    this.cacheSingleElem(elem);\n                } else {\n                    lightQueue.push(elem);\n                }\n            }\n            queue.length = 0;\n\n            if (lightQueue.length === 0) {\n                return;\n            }\n            //2.\n            lightQueue.sort(this.elemSortMethod);\n\n            const atlasList = storage.options.atlasAllowInsert ? list : newAtlases;\n\n            //TODO: try add to last atlas with repack, if possible, like in @mbusyrev algo\n\n            for (let i = 0; i < lightQueue.length; i++) {\n                const elem = lightQueue[i];\n\n                for (let j = 0; j < atlasList.length; j++) {\n                    if (atlasList[j].insert(elem)) {\n                        break;\n                    }\n                }\n                if (elem.newAtlas === null) {\n                    const newAtlas = this.takeFromPool();\n                    newAtlas.insert(elem);\n                    if (!elem.newAtlas) {\n                        throw new Error(\"Cant add element in shared atlas\");\n                    }\n                    newAtlases.push(newAtlas);\n                }\n            }\n\n            //new atlas and resizes here\n\n            //TODO: allow blitter to use smaller area if possible\n\n            lightQueue.length = 0;\n            newAtlases.length = 0;\n        }\n\n        /**\n         * precondition: gc objects have to be already marked as HANGING\n         * goes through all atlases, check which ones can be freed\n         */\n        gcTick() {\n            const {list, singles} = this;\n\n            //TODO: limit the number of dropped atlases per one gc?\n\n            for (let i = 0; i < list.length; i++) {\n                const atlas = list[i];\n                atlas.calcHoldArea();\n                if (atlas.usedArea === 0) {\n                    this.removeAtlas(atlas);\n                }\n            }\n\n            for (let key in singles) {\n                const atlas = singles[key];\n\n                if (atlas.addedElements[0].mem.cacheStatus === CacheStatus.Hanging) {\n                    this.removeAtlas(atlas);\n                }\n            }\n        }\n\n        atlasSortMethod = (a: Atlas, b: Atlas) => {\n            if (a.usedArea - b.usedArea > 0) {\n                return 1;\n            }\n            if (a.usedArea - b.usedArea < 0) {\n                return -1;\n            }\n            return 0;\n        };\n\n        removeAtlas(atlas: Atlas) {\n            const {list, pool} = this;\n\n            if (atlas.isSingle) {\n                //single!\n                delete this.singles[atlas.uniqId];\n                atlas.storage.dispose();\n                atlas.destroy();\n                return;\n            }\n\n            const ind = list.indexOf(atlas);\n            if (ind < 0) {\n                throw new Error('removed atlas not found in the list');\n            }\n            list.splice(ind, 1);\n            atlas.mem.cacheStatus = CacheStatus.Hanging;\n            this.drop.push(atlas);\n            atlas.storage.unbind();\n            pool.push(atlas.storage);\n        }\n\n        tryRepack() {\n            const {list} = this;\n            for (let i = 0; i < list.length; i++) {\n                list[i].calcHoldArea();\n            }\n            list.sort(this.atlasSortMethod);\n            // take N best atlases, try combine them\n            let N = 0;\n            const {atlasSize, mergeThreshold} = this.storage.options;\n\n            while (list.length >= 1 && list[0].usedArea === 0) {\n                this.removeAtlas(list[0]);\n            }\n\n            //TODO: also use changed tick?\n            if (list.length >= 2) {\n                if (list[0].usedArea + list[1].usedArea < atlasSize * atlasSize * mergeThreshold) {\n                    N = 2;\n                }\n            } else if (list.length >= 3) {\n                if (list[0].usedArea + list[1].usedArea + list[2].usedArea < 2 * atlasSize * atlasSize * mergeThreshold) {\n                    N = 3;\n                }\n            }\n\n            if (N == 0) {\n                return;\n            }\n\n            for (let j = 0; j < N; j++) {\n                for (let i = 0; i < list[j].addedElements.length; i++) {\n                    const elem = list[j].addedElements[i];\n                    if (elem.mem.cacheStatus <= CacheStatus.Drawn) {\n                        lightQueue.push(elem);\n                    }\n                }\n            }\n\n            lightQueue.sort(this.elemSortMethod);\n            for (let j = 0; j + 1 < N; j++) {\n                newAtlases.push(this.takeFromPool());\n            }\n\n            lightQueue.sort(this.elemSortMethod);\n\n            let failFlag = false;\n\n            for (let i = 0; i < lightQueue.length; i++) {\n                const elem = lightQueue[i];\n\n                for (let j = 0; j < newAtlases.length; j++) {\n                    if (newAtlases[j].insert(elem)) {\n                        break;\n                    }\n                }\n                if (elem.newAtlas === null) {\n                    failFlag = true;\n                    break;\n                }\n            }\n\n            if (failFlag) {\n                list.length = list.length - newAtlases.length;\n            } else {\n                for (let j = N - 1; j >= 0; j--) {\n                    this.removeAtlas(list[j]);\n                }\n            }\n            lightQueue.length = 0;\n            newAtlases.length = 0;\n        }\n\n        prerender() {\n            // takes frame queue and rasterizes everything\n            this.storage.render();\n            this.cleanup();\n        }\n\n        cleanup() {\n            const {drop} = this;\n            for (let i = 0; i < drop.length; i++) {\n                drop[i].destroy();\n            }\n            drop.length = 0;\n        }\n    }\n\n    export abstract class AtlasCollectionStorage {\n        constructor(public readonly type: CacheType, public options: IMultiAtlasOptions) {\n            // default setting\n            this.options = (Object as any).assign({\n                dim1MaxSize: 512,\n                dim2MinSize: 256,\n                dim2MaxSize: 256,\n                webglAntialias: true,\n                canvasAntiConflation: false,\n                atlasAllowInsert: false,\n\n                atlasSize: 1024,\n                atlasDivStep: 128,\n                mergeThreshold: 0.8\n            }, options);\n        }\n\n        collection: AtlasCollection = null;\n\n        bind(collection: AtlasCollection) {\n            this.collection = collection;\n        }\n\n        render() {\n            const {list, newSingles} = this.collection;\n            for (let j = 0; j < list.length; j++) {\n                this.renderSingle(list[j]);\n            }\n            for (let j = 0; j < newSingles.length; j++) {\n                this.renderSingle(newSingles[j]);\n            }\n            newSingles.length = 0;\n        }\n\n        abstract renderSingle(atlas: Atlas): void;\n\n        abstract createStorageBySize(size: PIXI.ISize): AbstractAtlasStorage;\n    }\n}\n","namespace pixi_blit {\n\texport class AtlasNode<T> {\n\t\tpublic childs: Array<AtlasNode<T>>;\n\t\tpublic rect: AtlasRectangle;\n\t\tpublic data: T;\n\n\t\tpublic constructor() {\n\t\t\tthis.childs = new Array<AtlasNode<T>>();\n\t\t\tthis.rect = new AtlasRectangle();\n\t\t\tthis.data = null;\n\t\t}\n\n\t\tpublic insert(width: number, height: number, data: T): AtlasNode<T> {\n\t\t\tif (this.childs.length > 0) {\n\t\t\t\tlet newNode: AtlasNode<T> = this.childs[0].insert(width, height, data);\n\t\t\t\tif (newNode != null) {\n\t\t\t\t\treturn newNode;\n\t\t\t\t}\n\t\t\t\treturn this.childs[1].insert(width, height, data);\n\t\t\t} else {\n\t\t\t\tlet rect: AtlasRectangle = this.rect;\n\t\t\t\tif (this.data != null) return null;\n\n\t\t\t\tif (width > rect.width || height > rect.height) return null;\n\n\t\t\t\tif (width == rect.width && height == rect.height) {\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.childs.push(AtlasNode.allocate());\n\t\t\t\tthis.childs.push(AtlasNode.allocate());\n\n\t\t\t\tlet dw: number = rect.width - width;\n\t\t\t\tlet dh: number = rect.height - height;\n\n\t\t\t\tif (dw > dh) {\n\t\t\t\t\tthis.childs[0].rect.set(rect.left, rect.top, width, rect.height);\n\t\t\t\t\tthis.childs[1].rect.set(rect.left + width, rect.top, rect.width - width, rect.height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.childs[0].rect.set(rect.left, rect.top, rect.width, height);\n\t\t\t\t\tthis.childs[1].rect.set(rect.left, rect.top + height, rect.width, rect.height - height);\n\t\t\t\t}\n\n\t\t\t\treturn this.childs[0].insert(width, height, data);\n\t\t\t}\n\t\t}\n\n\t\tstatic pool: Array<any> = [];\n\n\t\tstatic allocate<T>() {\n\t\t\treturn AtlasNode.pool.pop() as AtlasNode<T>\n\t\t\t\t|| new AtlasNode();\n\t\t}\n\n\t\tfreeSubtree() {\n\t\t\tthis.rect.set(0, 0, 1, 1);\n\t\t\tthis.data = null;\n\t\t\tAtlasNode.pool.push(this);\n\n\t\t\tfor (let i = 0; i < this.childs.length; i++) {\n\t\t\t\tthis.childs[i].freeSubtree();\n\t\t\t}\n\t\t\tthis.childs.length = 0;\n\t\t}\n\t}\n\n\texport class AtlasRectangle {\n\t\tpublic constructor(l: number = 0, t: number = 0, w: number = 0, h: number = 0) {\n\t\t\tthis.left = l;\n\t\t\tthis.top = t;\n\t\t\tthis.width = w;\n\t\t\tthis.height = h;\n\t\t}\n\n\t\tpublic left: number;\n\t\tpublic top: number;\n\t\tpublic height: number;\n\t\tpublic width: number;\n\n\t\tset(l: number, t: number, w: number, h: number) {\n\t\t\tthis.left = l;\n\t\t\tthis.top = t;\n\t\t\tthis.width = w;\n\t\t\tthis.height = h;\n\t\t}\n\t}\n}\n","namespace pixi_blit {\n    export enum CacheStatus {\n        Init = 0,\n        Drawn = 1,\n        Hanging = 2,\n        Disposed = 3,\n    }\n\n    let uniqIdCounter = 0;\n\n    export function generateUid() {\n        return ++uniqIdCounter;\n    }\n\n    export class MemoryComponent {\n        touchedFrameNum = -1;\n        touchedFrameCount = 0;\n        touchedGc = 0;\n        expire = -1;\n\n        // TODO: Store when did it expire\n        // TODO: Store how much bytes it costs\n\n        touchFrame(frame: number) {\n            if (this.touchedFrameNum < frame) {\n                this.touchedFrameNum = frame;\n                this.touchedFrameCount = 0;\n\n                if (this.cacheStatus === CacheStatus.Hanging)\n                {\n                    this.cacheStatus = CacheStatus.Drawn;\n                }\n            }\n            this.touchedFrameCount++;\n        }\n        touchGc(gcNum: number, lastGcFrameNum: number) {\n            const { expire } = this;\n\n            if (this.touchedFrameNum > lastGcFrameNum) {\n                this.touchedGc = gcNum;\n                if (this.cacheStatus === CacheStatus.Hanging)\n                {\n                    // never called, touchFrame should do it\n                    this.cacheStatus = CacheStatus.Drawn;\n                }\n            } else if (expire > 0 && this.touchedGc + expire < gcNum)\n            {\n                if (this.cacheStatus === CacheStatus.Drawn)\n                {\n                    this.cacheStatus = CacheStatus.Hanging;\n                }\n            }\n        }\n        cacheStatus = CacheStatus.Init;\n    }\n\n    export interface IGCEntry {\n        mem: MemoryComponent;\n    }\n}\n\n","namespace pixi_blit {\n    export abstract class GeneratedCanvasGraphics extends PIXI.Container {\n        constructor(public model: VectorModel) {\n            super();\n        }\n\n        _calculateBounds() {\n            this._bounds.clear();\n            this._bounds.addBoundsMatrix(this.model._genBounds, this.transform.worldTransform);\n        }\n\n        abstract renderCanvas(renderer: PIXI.CanvasRenderer): void;\n    }\n\n    export class RasterCache implements IGCEntry {\n        outerBounds: PIXI.Rectangle = null;\n        instance: VectorSprite;\n\n        mem = new MemoryComponent();\n        type = CacheType.Auto;\n        // atlas modifies those objects\n        graphicsNode: PIXI.Graphics | GeneratedCanvasGraphics = null;\n        texture = new PIXI.Texture(PIXI.Texture.WHITE.baseTexture);\n\n        addingToCollection: AtlasCollection = null;\n\n        // atlas sets those values\n        atlas: Atlas = null;\n        atlasNode: AtlasNode<RasterCache> = null;\n        baseTexDirtyId: number = 0;\n        atlasCanvasAntiConflation = false;\n\n        createdMat: PIXI.Matrix;\n        newAtlas: Atlas = null;\n        newAtlasNode: AtlasNode<RasterCache> = null;\n        oldAtlasSprite: PIXI.Sprite = null;\n\n        uniqId: number;\n\n        constructor(public model: VectorModel, mat: PIXI.Matrix) {\n            this.uniqId = generateUid();\n            this.createdMat = mat.clone();\n        }\n\n        // should be called once type of raster is determined;\n        prepare() {\n            const {model} = this;\n            const {vectorMode, generator} = model;\n\n            if (this.type === CacheType.Canvas2d\n                && vectorMode === VECTOR_MODE.GENERATED\n                && generator.generateCanvas) {\n                this.graphicsNode = generator.generateCanvas(model);\n            } else {\n                // pixi graphics mode\n                model.prepareVector();\n                this.graphicsNode = new PIXI.Graphics(model.graphics.geometry);\n            }\n            this.graphicsNode.transform.setFromMatrix(this.createdMat);\n            this.outerBounds = this.graphicsNode.getBounds();\n        }\n\n        get area() {\n            return this.outerBounds.width * this.outerBounds.height;\n        }\n\n        get width() {\n            return this.outerBounds.width;\n        }\n\n        get height() {\n            return this.outerBounds.height;\n        }\n\n        destroy() {\n            this.atlas = null;\n            this.atlasNode = null;\n            this.texture = null;\n            this.graphicsNode = null;\n            this.mem.cacheStatus = CacheStatus.Disposed;\n        }\n    }\n}\n","namespace pixi_blit {\n\n    const tempBounds = new PIXI.Bounds();\n    const tempMat = new PIXI.Matrix();\n    const tempRasters: Array<RasterCache> = [];\n    const tempModels: Array<VectorModel> = [];\n\n    export class ShapeCache {\n        constructor(public renderer: PIXI.Renderer,\n                    public root: PIXI.Container,\n                    public options: IMultiAtlasOptions) {\n            this.init();\n        }\n\n        /**\n         * number of gc ticks after which element will expire\n         */\n        gcExpire = 100;\n\n        init() {\n            const {renderer} = this;\n\n            this.gcExpire = 100;\n\n            const canvasOptions: IMultiAtlasOptions = (Object as any).assign({\n                size: 1024,\n                textureCount: 30,\n                canvasAntiConflation: false,\n            }, this.options);\n\n            const blitterOptions: IMultiAtlasOptions = (Object as any).assign({\n                size: 1024,\n                textureCount: 30,\n                webglAntialias: true,\n                atlasAllowInsert: false,\n            }, this.options);\n\n            this.registerAtlas(CacheType.Canvas2d, new CanvasStorage(renderer, canvasOptions));\n            this.registerAtlas(CacheType.WebGL, new BlitterStorage(renderer, blitterOptions));\n            // this.registerAtlas(CacheType.RuntimeWebGL, new BlitterStorage(renderer, options));\n        }\n\n        registerAtlas(type: CacheType, storage: AtlasCollectionStorage): AtlasCollection {\n            const collection = new AtlasCollection(storage);\n\n            this.atlases[type] = collection;\n            for (let key in this.runners) {\n                (this.runners as any)[key].add(collection);\n            }\n\n            return collection;\n        }\n\n        models: { [key: number]: VectorModel } = {};\n        rasters: { [key: number]: RasterCache } = {};\n\n        runners = {\n            gcTick: new PIXI.Runner('gcTick'),\n            processQueue: new PIXI.Runner('processQueue'),\n            prerender: new PIXI.Runner('prerender'),\n            tryRepack: new PIXI.Runner('tryRepack'),\n        };\n\n        // those two only for PixiJS simple tree\n        fillActiveElements = false;\n        activeElements: Array<VectorSprite> = [];\n        // == end of pixijs\n\n        atlases: { [key in CacheType]: AtlasCollection } = [null, null, null, null, null] as any;\n        frameNum = 0;\n        lastGcFrameNum = 0;\n        gcNum = 0;\n\n        tryRepack = false;\n\n        maxBoundsForMips = 1024;\n\n        defaultCacheType = CacheType.WebGL;\n\n        public frameTick() {\n            const {activeElements, runners} = this;\n\n            this.frameNum++;\n            this.fillActiveElements = true;\n            activeElements.length = 0;\n            this.recFind(this.root, this.visitFrame);\n            runners.processQueue.emit();\n            if (this.tryRepack) {\n                runners.tryRepack.emit();\n                this.tryRepack = false;\n            }\n            this.runners.prerender.emit();\n\n            // before or after FOR, depending on mechanism of updateTransform, we might have to call it\n            // this.root.updateTransform()\n            for (let i = 0; i < activeElements.length; i++) {\n                activeElements[i].prerender();\n            }\n            this.fillActiveElements = false;\n        }\n\n        //TODO: move method to graphics class\n        isEmpty(graphics: PIXI.Graphics) {\n            (graphics as any).finishPoly();\n            return (graphics.geometry as any).graphicsData.length === 0;\n        }\n\n        protected visitFrame = (elem: VectorSprite): void => {\n            const {model} = elem;\n\n            if (!this.models[model.uniqId]) {\n                this.models[model.uniqId] = model;\n                model.mem.expire = this.gcExpire;\n            }\n\n            model.prepareBounds();\n\n            const {graphics} = model;\n\n            this.activeElements.push(elem);\n\n            if (graphics && this.isEmpty(graphics)) {\n                elem.disable();\n                return;\n            }\n\n            model.mem.touchFrame(this.frameNum);\n\n            const cacheType = elem.preferredCache !== CacheType.Auto ? elem.preferredCache\n                : model.preferredCache !== CacheType.Auto ? model.preferredCache : this.defaultCacheType;\n\n            if (cacheType === CacheType.WebGL\n                || cacheType === CacheType.Canvas2d) {\n                const mip = this.mipBehaviour(elem);\n\n                if (mip) {\n                    if (mip.mem.cacheStatus === CacheStatus.Init) {\n                        mip.type = cacheType;\n                        mip.prepare();\n                        this.atlases[mip.type].addToQueue(mip);\n                    }\n                    elem.enableRaster(mip);\n\n                    //TODO: touch has to be called for static elements in case they didnt appear in visitFrame\n                    mip.mem.touchFrame(this.frameNum);\n                    return;\n                    // elem check raster according to its position\n                }\n            }\n\n            //TODO: add RuntimeWebGL support here\n            model.prepareVector();\n            elem.enableGraphics(model.graphics.geometry);\n        };\n\n        mipBehaviour(elem: VectorSprite): RasterCache {\n            const {model} = elem;\n            const mat = tempMat.copyFrom(elem.transform.worldTransform);\n            const elemBounds = tempBounds;\n\n            //TODO: scale9grid caching?\n\n            //TODO: cache transform details\n\n            let extraScaleX = elem.spriteGenerator ? Math.abs(elem.spriteGenerator.scaleX) : 1.0;\n            let extraScaleY = elem.spriteGenerator ? Math.abs(elem.spriteGenerator.scaleY) : 1.0;\n\n            //use this thing as mat if we use precise?\n            mat.a = Math.sqrt(mat.a * mat.a + mat.b * mat.b) / extraScaleX;\n            mat.d = Math.sqrt(mat.c * mat.c + mat.d * mat.d) / extraScaleY;\n            mat.b = 0;\n            mat.c = 0;\n            mat.tx -= Math.round(mat.tx);\n            mat.ty -= Math.round(mat.ty);\n\n            //TODO: use scaled AABB if not rotated\n\n            model.copyBounds(elem.transform.worldTransform, elemBounds);\n\n            if (elemBounds.maxX - elemBounds.minX > this.maxBoundsForMips\n                || elemBounds.maxY - elemBounds.minY > this.maxBoundsForMips) {\n                return null;\n            }\n            const matrixScale = Math.max(mat.a, mat.d);\n            let mipLevel = Math.ceil(Math.log(matrixScale) / Math.LN2 - (1e-2));\n            // clamp\n            mipLevel = Math.min(Math.max(mipLevel, -MIN_CACHE_LEVELS), MAX_CACHE_LEVELS);\n\n            let raster = model.mipCache[mipLevel];\n\n            if (raster) {\n                if (raster.mem.cacheStatus === CacheStatus.Disposed) {\n                    // in case its already disposed\n                    // report re-creation to statistics!\n                    delete model.mipCache[mipLevel];\n                } else {\n                    return raster;\n                }\n            }\n\n            mat.a = mat.d = Math.pow(2, mipLevel);\n            mat.tx = mat.ty = 0;\n\n\n            if (model.mipCache.length <= mipLevel) {\n                model.mipCache.length = mipLevel + 1;\n            }\n            // RasterCache sets its transformedBounds in constructor\n            raster = model.mipCache[mipLevel] = new RasterCache(model, mat);\n            raster.mem.expire = this.gcExpire;\n            this.rasters[raster.uniqId] = raster;\n\n            return raster;\n        }\n\n        protected recFind(elem: PIXI.Container, visit: (elem: VectorSprite) => void) {\n            if (elem instanceof VectorSprite) {\n                visit(elem);\n            }\n            if (!elem.vectorChildren) {\n                return;\n            }\n            const {children} = elem;\n            for (let i = 0; i < children.length; i++) {\n                this.recFind(children[i] as PIXI.Container, visit);\n            }\n        }\n\n        public gcTick() {\n            this.gcNum++;\n\n            for (let key in this.rasters) {\n                const raster = this.rasters[key];\n                const {mem} = raster;\n\n                if (mem.cacheStatus === CacheStatus.Disposed) {\n                    // something was disposed in prev tick\n                    tempRasters.push(raster);\n                }\n\n                mem.touchGc(this.gcNum, this.lastGcFrameNum);\n            }\n            this.frameNum++; // just in case something will happen before frameTick()\n\n            for (let key in this.models) {\n                const model = this.models[key];\n                const {mem} = model;\n\n                if (!model.isDisposable()) {\n                    continue;\n                }\n                mem.touchGc(this.gcNum, this.lastGcFrameNum);\n                if (mem.cacheStatus === CacheStatus.Hanging) {\n                    // something was disposed in prev tick\n                    model.dispose();\n                }\n                tempModels.push(model);\n            }\n\n            for (let i = 0; i < tempRasters.length; i++) {\n                delete this.rasters[tempRasters[i].uniqId];\n            }\n            tempRasters.length = 0;\n            for (let i = 0; i < tempRasters.length; i++) {\n                delete this.models[tempModels[i].uniqId];\n            }\n            tempModels.length = 0;\n\n            this.lastGcFrameNum = this.frameNum;\n            this.runners.gcTick.emit();\n            this.tryRepack = true;\n\n            // 1. Find all the graphics that have to be rendered on stage\n            // 2. Mark old mips as aren't needed\n            // 3. Drop a few old atlases if they are cost less then X% mem, starting from even old ones\n            // drop runtime atlases\n            // 4. put all instances in new atlases\n            // 5. put everything else in runtime atlas\n            // 6. mark rest as full runtime\n            // 7. draw all atlases\n        }\n    }\n}\n","namespace pixi_blit {\n    export let MIN_CACHE_LEVELS = 5;\n    export let MAX_CACHE_LEVELS = 3;\n\n    export enum CANVAS_CONFLATION_MODE {\n        NO = 0,\n        YES = 1,\n        AUTO = 2,\n    }\n\n    export enum VECTOR_MODE {\n        INVALID = 0,\n        PROVIDED = 1,\n        GENERATED = 2,\n    }\n\n    export interface IVectorGenerator {\n        generate(model: VectorModel): void;\n\n        generateBounds?(model: VectorModel): void;\n\n        generateCanvas?(model: VectorModel): GeneratedCanvasGraphics;\n    }\n\n    export interface IVectorModelOptions {\n        generator?: IVectorGenerator;\n        params?: { [key: string]: any };\n        graphics?: PIXI.Graphics;\n    }\n\n    export class VectorModel {\n\n        constructor(options?: IVectorModelOptions) {\n            this.uniqId = generateUid();\n\n            options = options || {};\n\n            if (options.generator) {\n                this.generator = options.generator;\n            } else if (options.graphics) {\n                this.graphics = options.graphics;\n            }\n\n            this.params = options.params || {};\n        }\n\n        params: { [key: string]: any };\n\n        uniqId: number;\n\n        mem = new MemoryComponent();\n        // works with canvas2d\n        conflationMode = CANVAS_CONFLATION_MODE.AUTO;\n        vectorMode = VECTOR_MODE.PROVIDED;\n        dirtyBounds = false;\n        dirtyGraphics = false;\n\n        mipCache: Array<RasterCache> = [];\n        instances: { [uniqId: number]: VectorSprite } = {};\n        instanceCache: { [uniqId: number]: RasterCache } = {};\n\n        copyBounds(mat: PIXI.Matrix, out: PIXI.Bounds) {\n            const {minX, minY, maxX, maxY} = this._genBounds || this._graphics.geometry.bounds;\n\n            out.clear();\n            out.addFrameMatrix(mat, minX, maxX, minY, maxY);\n        }\n\n        _generator: IVectorGenerator = null;\n        _graphics: PIXI.Graphics = null;\n        _genBounds: PIXI.Bounds = null;\n\n        set generator(value: IVectorGenerator) {\n            this._generator = value;\n            this.vectorMode = VECTOR_MODE.GENERATED;\n        }\n\n        get generator() {\n            return this._generator;\n        }\n\n        set graphics(value: PIXI.Graphics) {\n            this._graphics = value;\n            this.vectorMode = VECTOR_MODE.PROVIDED;\n            //TODO: mark graphics as static somehow - dont modify after measurements are taken\n        }\n\n        get graphics() {\n            return this._graphics;\n        }\n\n        prepareVector() {\n            if (this.vectorMode === VECTOR_MODE.INVALID) {\n                throw new Error('cant prepare empty VectorModel');\n            }\n\n            if (this.vectorMode === VECTOR_MODE.GENERATED) {\n                this.mem.cacheStatus = CacheStatus.Drawn;\n                if (!this._graphics || this.dirtyGraphics) {\n                    this.dirtyGraphics = false;\n                    this._graphics = new PIXI.Graphics();\n                    this.generator.generate(this);\n                    (this._graphics as any).finishPoly();\n                }\n            }\n        }\n\n        prepareBounds() {\n            // for pixi its the same as prepareVector\n            const {vectorMode, _generator} = this;\n\n            if (vectorMode === VECTOR_MODE.GENERATED\n                && (_generator.generateCanvas || _generator.generateBounds)) {\n                if (!this._genBounds || this.dirtyBounds) {\n                    this.dirtyBounds = false;\n                    this._genBounds = new PIXI.Bounds();\n                    _generator.generateBounds(this);\n                }\n                return;\n            }\n            this.prepareVector();\n        }\n\n        dispose(disposeRaster = false) {\n            if (!this._graphics) {\n                return;\n            }\n            if (this.vectorMode === VECTOR_MODE.GENERATED) {\n                this._graphics.geometry.destroy();\n                this._graphics.destroy();\n                this._graphics = null;\n            }\n\n            if (disposeRaster) {\n                this.disposeRaster();\n            }\n        }\n\n        disposeRaster() {\n            for (let i = 0; i < this.mipCache.length; i++) {\n                const elem = this.mipCache[i];\n\n                if (elem) {\n                    this.mipCache[i] = null;\n                    if (elem.mem.cacheStatus === CacheStatus.Drawn) {\n                        elem.mem.cacheStatus = CacheStatus.Hanging;\n                    }\n                }\n            }\n        }\n\n        reset() {\n            this.dirtyBounds = true;\n            this.dirtyGraphics = true;\n            this.disposeRaster();\n        }\n\n        renderCanvas() {\n\n        }\n\n        isDisposable() {\n            if (this.vectorMode !== VECTOR_MODE.GENERATED\n                || !this._graphics) {\n                return false;\n            }\n\n            const len = (this._graphics.geometry as any).points.length;\n\n            // return len >= 100;\n            return len > 0;\n        }\n\n        preferredCache = CacheType.Auto;\n    }\n}\n","namespace pixi_blit {\n    const tempMat = new PIXI.Matrix();\n\n    export interface ISprite extends PIXI.Container {\n        texture: PIXI.Texture;\n        tint?: number;\n\n        containsPoint?(point: PIXI.IPoint): boolean;\n    }\n\n    export interface ISpriteGenerator {\n        readonly scaleX: number;\n        readonly scaleY: number;\n\n        generateSprite(): ISprite;\n    }\n\n    export class VectorSprite extends PIXI.Container {\n        constructor(public model: VectorModel) {\n            super();\n        }\n\n        tint = 0xFFFFFF;\n\n        preferredCache: CacheType = CacheType.Auto;\n\n        activeCacheType = CacheType.No_Cache;\n        activeRaster: RasterCache = null;\n        activeGraphics: PIXI.Graphics = null;\n        activeSprite: ISprite = null;\n        rasterDirty = true;\n\n        spriteGenerator: ISpriteGenerator = null;\n\n        enableRaster(raster: RasterCache) {\n            if (this.activeRaster !== raster) {\n                this.rasterDirty = true;\n            }\n            this.activeRaster = raster;\n            this.activeCacheType = raster.type;\n        }\n\n        enableGraphics(geom: PIXI.GraphicsGeometry) {\n            this.activeCacheType = CacheType.No_Cache;\n            if (this.activeGraphics && this.activeGraphics.geometry === geom) {\n                return;\n            }\n            this.activeRaster = null;\n            this.activeSprite = null;\n            this.activeGraphics = new PIXI.Graphics(geom);\n        }\n\n        disable() {\n            this.activeCacheType = CacheType.No_Cache;\n            this.activeGraphics = null;\n            this.activeRaster = null;\n            this.activeSprite = null;\n        }\n\n        updateTransform() {\n            super.updateTransform();\n            if (this.activeSprite) {\n                this.activeSprite.transform.updateTransform(this.transform);\n                this.activeSprite.tint = this.tint;\n                (this.activeSprite as any).worldAlpha = this.worldAlpha;\n            }\n            if (this.activeGraphics) {\n                this.activeGraphics.transform.updateTransform(this.transform);\n                this.activeGraphics.tint = this.tint;\n                (this.activeGraphics as any).worldAlpha = this.worldAlpha;\n            }\n        }\n\n        prerender() {\n            const {activeRaster} = this;\n\n            // position the raster or graphics\n            if (activeRaster) {\n                if (activeRaster.mem.cacheStatus > CacheStatus.Drawn) {\n                    throw Error(\"CacheStatus for active raster in vectorSprite is not Drawn!\");\n                }\n\n                if (this.rasterDirty) {\n                    if (!this.activeSprite) {\n                        if (this.spriteGenerator) {\n                            this.activeSprite = this.spriteGenerator.generateSprite();\n                        } else {\n                            this.activeSprite = new PIXI.Sprite();\n                        }\n                    }\n                    this.rasterDirty = false;\n\n                    this.activeSprite.texture = activeRaster.texture;\n                    tempMat.copyFrom(activeRaster.graphicsNode.transform.localTransform);\n                    tempMat.tx = -activeRaster.outerBounds.x;\n                    tempMat.ty = -activeRaster.outerBounds.y;\n                    tempMat.invert();\n                    this.activeSprite.transform.setFromMatrix(tempMat);\n                }\n            }\n        }\n\n        containsPoint(point: PIXI.IPoint) {\n            const {activeSprite, activeGraphics} = this;\n            //for now its just sprite copy\n            if (activeSprite && activeSprite.containsPoint) {\n                return activeSprite.containsPoint(point);\n            } else if (activeGraphics) {\n                return activeGraphics.containsPoint(point as PIXI.Point);\n            }\n            return false;\n        }\n\n        calculateBounds() {\n            const {_bounds, activeSprite, activeGraphics} = this;\n            if (activeSprite) {\n                activeSprite._bounds = this._bounds;\n                activeSprite.calculateBounds();\n            } else if (activeGraphics) {\n                activeGraphics._bounds = this._bounds;\n                activeGraphics.calculateBounds();\n            }\n        }\n\n        _render(renderer: PIXI.Renderer) {\n            const {activeRaster, activeGraphics, activeSprite} = this;\n            if (activeRaster) {\n                (activeSprite as any)._render(renderer);\n            } else if (activeGraphics) {\n                (activeGraphics as any)._render(renderer);\n            } else {\n                // ??? guess no graphics for us, render a marker?\n            }\n        }\n    }\n}\n","declare namespace PIXI {\n    export interface DisplayObject {\n        vectorChildren?: boolean;\n    }\n}\n\nnamespace pixi_blit {\n    (Object as any).assign(PIXI.DisplayObject.prototype, {\n        vectorChildren: true,\n    });\n}\n\nnamespace pixi_blit {\n    namespace model {\n        // target\n        // 1. changing shift & scale -> use pow2\n        // 2. same shift & scale for a long time - use instanced\n\n        //Main algo\n        // 1. Find all the graphics that have to be rendered on stage\n        // 2. Mark old mips as aren't needed\n        // 3. Drop a few old atlases if they are cost less then X% mem, starting from even old ones\n        // drop runtime atlases\n        // 4. put all instances in new atlases\n        // 5. put everything else in runtime atlas\n        // 6. mark rest as full runtime\n        // 7. draw all atlases\n\n        // 8. render: do it all\n\n        // How to decide which cache works on element? canvas/webgl?\n        // some elements should prefer canvas, some webgl, and there has to be default setting.\n        // WebGL2 if available. Canvas for IE, WebGL for the rest.\n        // one model has only one preferred\n\n        export interface IVectorModel {\n\n            touchedFrame: number;\n        }\n\n        export interface IGCEntry {\n            memoryBytes: number;\n            // frequency how its touched?\n            touched: number;\n            createdAt: number;\n            tickUsed: number;\n\n            draw(node: IModelInstance): void;\n\n            dispose(): void;\n\n            cacheStatus: CacheStatus;\n        }\n\n        export interface IVectorGeometry extends IGCEntry {\n        }\n\n        export interface IModelInstance {\n            uniqId: number;\n            model: IVectorModel;\n        }\n\n        export interface IAtlas {\n        }\n\n        export interface IRasterCache extends IGCEntry {\n            key: string;\n            model: IVectorModel;\n            mat: PIXI.Matrix; //matrix that element was rendered with\n            atlasNode: AtlasNode<IRasterCache>;\n            atlas: IAtlas;\n            instance: IModelInstance; // instance on screen that it belong to. Null means shared\n        }\n    }\n\n}\n","namespace pixi_blit {\n    const updated: Array<RasterCache> = [];\n    const bounds = new PIXI.Bounds();\n\n    export class CanvasAtlasResource extends PIXI.resources.Resource {\n        constructor(public storage: CanvasAtlasStorage) {\n            super(storage.options.width, storage.options.height);\n        }\n\n        defaultConflationMode = CANVAS_CONFLATION_MODE.NO;\n        detectedConflationMode = CANVAS_CONFLATION_MODE.NO;\n        mixedContent = false;\n\n        get source()\n        {\n            return this.storage.canvas;\n        }\n\n        detectConflation() {\n            const {atlas} = this.storage;\n            const {addedElements} = atlas;\n            // render only new elements\n\n            let hasYes = false, hasNo = false;\n\n            for (let i = 0; i < addedElements.length; i++) {\n                const elem = addedElements[i];\n\n                let mode = elem.model.conflationMode !== CANVAS_CONFLATION_MODE.AUTO ?\n                    elem.model.conflationMode : this.defaultConflationMode;\n                if (mode === CANVAS_CONFLATION_MODE.NO) {\n                    elem.atlasCanvasAntiConflation = false;\n                    hasNo = true;\n                } else {\n                    elem.atlasCanvasAntiConflation = true;\n                    hasYes = true;\n                }\n            }\n\n            this.mixedContent = hasNo && hasYes;\n            if (!this.mixedContent && hasYes) {\n                this.detectedConflationMode = CANVAS_CONFLATION_MODE.YES;\n            } else {\n                this.detectedConflationMode = CANVAS_CONFLATION_MODE.NO;\n            }\n        }\n\n        fixImageData(imageData: ImageData, fix: boolean = true) {\n            if (!fix) {\n                return imageData;\n            }\n\n            const data = imageData.data;\n\n            let opaque = 0;\n            let transparent = 0;\n            for (let i = 3; i < data.length; i += 4) {\n                if (data[i] > 0) {\n                    if (data[i] == 255) {\n                        opaque++;\n                    } else {\n                        transparent++;\n                    }\n                }\n            }\n\n            if (opaque * 99 > transparent) {\n                for (let i = 3; i < data.length; i += 4) {\n                    if (data[i] > 153) {\n                        data[i] = data[i] * 10 - 153 * 9;\n                    }\n                }\n            }\n            return imageData;\n        }\n\n        upload(renderer: PIXI.Renderer, tex: PIXI.BaseTexture, glTex: PIXI.GLTexture) {\n            const {mixedContent, detectedConflationMode} = this;\n            const {atlas, canvas, context} = this.storage;\n            const {addedElements} = atlas;\n            const {gl} = renderer;\n\n            const w = canvas.width;\n            const h = canvas.height;\n\n            const dirtyId = glTex.dirtyId;\n\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\n            if (dirtyId < 0) {\n                glTex.width = w;\n                glTex.height = h;\n\n                const initData = detectedConflationMode === CANVAS_CONFLATION_MODE.NO\n                    ? canvas : this.fixImageData(context.getImageData(0, 0, w, h));\n                gl.texImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    gl.RGBA,\n                    gl.RGBA,\n                    gl.UNSIGNED_BYTE,\n                    initData\n                );\n\n                if (!mixedContent) {\n                    return true;\n                }\n            }\n\n            updated.length = 0;\n            let area = 0;\n            for (let i = 0; i < addedElements.length; i++) {\n                const region = addedElements[i];\n                if (region.baseTexDirtyId <= dirtyId) {\n                    continue;\n                }\n                const {rect} = region.atlasNode;\n                updated.push(region);\n                bounds.addFramePad(rect.left, rect.top, rect.left + rect.width, rect.top + rect.height, 0, 0);\n                area += rect.width * rect.height;\n            }\n\n            let sq = (bounds.maxX - bounds.minX) * (bounds.maxY - bounds.minY);\n\n            if (mixedContent || area * 2 < sq) {\n                // multiple rects\n                for (let i = 0; i < updated.length; i++) {\n                    const {rect} = updated[i].atlasNode;\n                    gl.texSubImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        rect.left,\n                        rect.top,\n                        gl.RGBA,\n                        gl.UNSIGNED_BYTE,\n                        this.fixImageData(context.getImageData(rect.left, rect.top,\n                            rect.width, rect.height),\n                            updated[i].atlasCanvasAntiConflation)\n                    );\n                }\n            } else {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    bounds.minX,\n                    bounds.minY,\n                    gl.RGBA,\n                    gl.UNSIGNED_BYTE,\n                    this.fixImageData(context.getImageData(bounds.minX, bounds.minY,\n                        bounds.maxX - bounds.minX, bounds.maxY - bounds.minY),\n                        detectedConflationMode === CANVAS_CONFLATION_MODE.YES)\n                );\n            }\n\n            return true;\n        }\n    }\n}\n","///<reference path=\"../AtlasCollection.ts\"/>\nnamespace pixi_blit {\n    export class CanvasAtlasStorage extends AbstractAtlasStorage {\n        static CanvasHTMLContainer: HTMLElement = null;\n\n        canvasRt: PIXI.RenderTexture = null;\n        baseTex: PIXI.BaseTexture = null;\n        resource: CanvasAtlasResource = null;\n        rootContainer = new PIXI.Container();\n\n        constructor(public options: PIXI.ISize) {\n            super(CacheType.Canvas2d, options);\n\n            this.canvasRt = PIXI.RenderTexture.create(options);\n            this.rootContainer.renderCanvas = this.renderCanvas;\n\n            this.resource = new CanvasAtlasResource(this);\n            this.baseTex = new PIXI.BaseTexture(this.resource);\n        }\n\n        get baseTexture() {\n            return this.baseTex;\n        }\n\n        get canvas(): HTMLCanvasElement {\n            return (this.canvasRt as any).baseTexture._canvasRenderTarget.canvas;\n        }\n\n        get context(): CanvasRenderingContext2D {\n            return (this.canvasRt as any).baseTexture._canvasRenderTarget.context;\n        }\n\n        renderOnlyModified = true;\n        addedToHtml = false;\n        /**\n         * called from blitterCache\n         * @param renderer\n         */\n        renderCanvas = (renderer: PIXI.CanvasRenderer) => {\n            if (!this.addedToHtml && CanvasAtlasStorage.CanvasHTMLContainer) {\n                this.addedToHtml = true;\n                CanvasAtlasStorage.CanvasHTMLContainer.appendChild(this.canvas);\n            }\n\n            const {atlas, renderOnlyModified, baseTex} = this;\n            const {addedElements} = atlas;\n            // render only new elements\n\n            baseTex.update();\n            for (let i = 0; i < addedElements.length; i++) {\n                const elem = addedElements[i];\n                const {graphicsNode, mem} = elem;\n                // detect mixed conflation content\n\n                if (renderOnlyModified && elem.atlas === atlas) {\n                    continue;\n                }\n\n                // move modification id to atlas node?\n                elem.baseTexDirtyId = baseTex.dirtyId;\n                mem.cacheStatus = CacheStatus.Drawn;\n                atlas.prepareRender(elem);\n\n                if (elem.oldAtlasSprite) {\n                    elem.oldAtlasSprite.renderCanvas(renderer);\n                    elem.oldAtlasSprite = null;\n                } else {\n                    graphicsNode.renderCanvas(renderer);\n                }\n            }\n        };\n\n        dispose() {\n            if (this.addedToHtml) {\n                CanvasAtlasStorage.CanvasHTMLContainer.removeChild(this.canvas);\n            }\n\n            this.baseTexture.dispose();\n\n            const bt = (this.canvasRt as any).baseTexture;\n\n            if (bt._canvasRenderTarget) {\n                // free canvas\n                bt._canvasRenderTarget.canvas.width = 0;\n                bt._canvasRenderTarget.canvas.height = 0;\n            }\n        }\n    }\n\n    export class CanvasStorage extends AtlasCollectionStorage {\n        constructor(public renderer: PIXI.Renderer, options: IMultiAtlasOptions) {\n            super(CacheType.WebGL, options);\n        }\n\n        renderBuffer: RenderBuffer = null;\n        canvasRenderer = new PIXI.CanvasRenderer();\n\n        renderSingle(atlas: Atlas) {\n            const {canvasRenderer, renderer} = this;\n            if (!atlas.hasNew()) {\n                return;\n            }\n            atlas.markClean();\n\n            const storage = atlas.storage as CanvasAtlasStorage;\n            canvasRenderer.render(storage.rootContainer, storage.canvasRt, false);\n            renderer.texture.bind(storage.baseTex, 0);\n        }\n\n        createStorageBySize(size: PIXI.ISize) {\n            const atlas = new CanvasAtlasStorage({\n                width: size.width,\n                height: size.height\n            });\n            atlas.resource.defaultConflationMode = this.options.canvasAntiConflation ? CANVAS_CONFLATION_MODE.YES : CANVAS_CONFLATION_MODE.NO;\n            return atlas;\n        }\n    }\n}\n","///<reference path=\"../AtlasCollection.ts\"/>\nnamespace pixi_blit {\n    import Atlas = pixi_blit.Atlas;\n\n    export class WebGLAtlasStorage extends AbstractAtlasStorage {\n        rt: PIXI.RenderTexture = null;\n        rootContainer = new PIXI.Container();\n\n        constructor(public options: PIXI.ISize) {\n            super(CacheType.WebGL, options);\n            this.rt = PIXI.RenderTexture.create(options);\n            this.rootContainer.render = this.render;\n        }\n\n        get baseTexture() {\n            return this.rt.baseTexture;\n        }\n\n        renderOnlyModified = false;\n        renderCopySeparate = false;\n        copies: Array<PIXI.Sprite> = [];\n\n        /**\n         * called from blitterCache\n         * @param renderer\n         */\n        render = (renderer: PIXI.Renderer) => {\n            const {atlas, renderOnlyModified, renderCopySeparate, copies} = this;\n            const {addedElements} = atlas;\n            // render only new elements\n\n            for (let i = 0; i < addedElements.length; i++) {\n                const elem = addedElements[i];\n                const {graphicsNode, mem} = elem;\n\n                if (renderOnlyModified && mem.cacheStatus !== CacheStatus.Init) {\n                    continue;\n                }\n\n                //TODO: use drawImage on old sprite\n                elem.oldAtlasSprite = null;\n\n                mem.cacheStatus = CacheStatus.Drawn;\n                this.atlas.prepareRender(elem);\n\n                //TODO: old sprites should be blit on top of result, not to blit thingy!\n                if (elem.oldAtlasSprite) {\n                    if (renderCopySeparate) {\n                        copies.push(elem.oldAtlasSprite);\n                    } else {\n                        elem.oldAtlasSprite.render(renderer);\n                    }\n                    elem.oldAtlasSprite = null;\n                } else {\n                    graphicsNode.render(renderer);\n                }\n            }\n        };\n\n        renderCopies(renderer: PIXI.Renderer) {\n            const { copies } = this;\n\n            for (let i = 0; i < copies.length; i++) {\n                copies[i].render(renderer);\n            }\n\n            copies.length = 0;\n        }\n\n        dispose()\n        {\n            this.rt.baseTexture.dispose();\n        }\n    }\n\n    export class BlitterStorage extends AtlasCollectionStorage {\n        constructor(public renderer: PIXI.Renderer, options: IMultiAtlasOptions) {\n            super(CacheType.WebGL, options);\n\n            const textureOptions = {\n                width: options.atlasSize,\n                height: options.atlasSize,\n            };\n\n            this.renderBuffer = RenderBuffer.create(renderer, textureOptions);\n        }\n\n        renderBuffer: RenderBuffer = null;\n\n        renderSingle(atlas: Atlas) {\n            const {renderBuffer, renderer} = this;\n            if (!atlas.hasNew()) {\n                return;\n            }\n            atlas.markClean();\n\n            const storage = atlas.storage as WebGLAtlasStorage;\n\n            storage.renderCopySeparate = true;\n\n            //TODO: blit only modified parts\n            renderBuffer.renderAndBlit(storage.rootContainer, storage.rt, true);\n\n            if (storage.copies.length > 0) {\n                renderer.renderTexture.bind(storage.rt);\n                renderer.batch.flush();\n                storage.renderCopies(renderer);\n                renderer.batch.flush();\n            }\n        }\n\n        createStorageBySize(size: PIXI.ISize) {\n            return new WebGLAtlasStorage({\n                width: size.width,\n                height: size.height\n            });\n        }\n    }\n}\n"]}